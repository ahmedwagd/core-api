generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment {
  id                                        Int                 @id @default(autoincrement())
  created_by_user_id                        Int
  assigned_to_id                            Int
  clinic_id                                 Int
  patient_id                                Int
  bill_id                                   Int?
  appointment_status                        appointment_status? @default(SCHEDULED)
  appointment_date                          DateTime            @db.Timestamptz(6)
  reason                                    String?
  created_at                                DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                                DateTime?           @default(now()) @db.Timestamptz(6)
  user_appointment_assigned_to_idTouser     user                @relation("appointment_assigned_to_idTouser", fields: [assigned_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bill                                      bill?               @relation(fields: [bill_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clinic                                    clinic              @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_appointment_created_by_user_idTouser user                @relation("appointment_created_by_user_idTouser", fields: [created_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient                                   patient             @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cancellation_log                          cancellation_log[]

  @@index([assigned_to_id], map: "idx_appointment_assigned_to")
  @@index([appointment_date], map: "idx_appointment_date")
  @@index([patient_id], map: "idx_appointment_patient")
  @@map("appointments")
}

model bill {
  id             Int             @id @default(autoincrement())
  amount         Decimal         @db.Decimal(10, 2)
  invoice_status invoice_status? @default(PENDING)
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?       @default(now()) @db.Timestamptz(6)
  appointment    appointment[]

  @@map("bills")
}

model cancellation_log {
  id             Int         @id @default(autoincrement())
  action         String      @db.VarChar(255)
  description    String?
  appointment_id Int
  user_id        Int
  deleted_at     DateTime?   @default(now()) @db.Timestamptz(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([appointment_id], map: "idx_cancellation_appointment")
  @@map("cancellation_logs")
}

model clinic {
  id           Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  phone        String        @db.VarChar(20)
  address      String
  manager      String        @db.VarChar(255)
  email        String        @db.VarChar(255)
  is_active    Boolean?      @default(true)
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?     @default(now()) @db.Timestamptz(6)
  deleted_at   DateTime?     @db.Timestamptz(6)
  appointments appointment[]
  users        user[]

  @@map("clinic")
}

model examination {
  id                             Int       @id @default(autoincrement())
  subjective_pain_scale          Int?
  subjective_location            String?   @db.VarChar(255)
  subjective_description         String?
  subjective_aggravating_factors String?
  objective_posture              String?   @db.VarChar(255)
  objective_region               String?   @db.VarChar(255)
  objective_physiological_motion String?
  palpation                      String?
  patient_id                     Int
  created_at                     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime? @default(now()) @db.Timestamptz(6)
  patient                        patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([patient_id], map: "idx_examinations_patient")
  @@map("examinations")
}

model patient {
  id                Int                @id @default(autoincrement())
  first_name        String             @db.VarChar(255)
  last_name         String             @db.VarChar(255)
  phone             String             @db.VarChar(20)
  gender            gender             @default(OTHER)
  birthday          DateTime?          @db.Date
  occupation        String?            @db.VarChar(255)
  weight            Decimal?           @db.Decimal(5, 2)
  length            Decimal?           @db.Decimal(5, 2)
  history           String?
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  appointments      appointment[]
  examinations      examination[]
  progression_notes progression_note[]
  treatment_plans   treatment_plan[]

  @@map("patients")
}

model progression_note {
  id          Int       @id @default(autoincrement())
  description String
  patient_id  Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  patient     patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([patient_id], map: "idx_progression_notes_patient")
  @@map("progression_notes")
}

model schedule {
  id             Int          @id @default(autoincrement())
  day_of_week    days_of_week
  available_from DateTime     @db.Time(6)
  available_to   DateTime     @db.Time(6)
  user_id        Int
  user           user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([user_id], map: "idx_schedule_user")
  @@map("schedules")
}

model treatment_plan {
  id          Int       @id @default(autoincrement())
  description String
  patient_id  Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  patient     patient   @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([patient_id], map: "idx_treatment_plans_patient")
  @@map("treatment_plans")
}

model user {
  id                                               Int                @id @default(autoincrement())
  email                                            String             @unique @db.VarChar(255)
  password                                         String             @db.VarChar(255)
  is_verified                                      Boolean?           @default(false)
  hashedRefreshToken                               String?
  role                                             Role               @default(RECEPTIONIST)
  first_name                                       String             @db.VarChar(255)
  last_name                                        String             @db.VarChar(255)
  gender                                           gender             @default(OTHER)
  bio                                              String?
  specialization                                   String?            @db.VarChar(255)
  license                                          String?            @db.VarChar(255)
  social_id                                        String?            @db.VarChar(255)
  birthday                                         DateTime?          @db.Date
  phone                                            String?            @db.VarChar(20)
  created_at                                       DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime?          @default(now()) @db.Timestamptz(6)
  deleted_at                                       DateTime?          @db.Timestamptz(6)
  appointment_appointment_assigned_to_idTouser     appointment[]      @relation("appointment_assigned_to_idTouser")
  appointment_appointment_created_by_user_idTouser appointment[]      @relation("appointment_created_by_user_idTouser")
  cancellation_log                                 cancellation_log[]
  schedule                                         schedule[]
  clinic                                           clinic?            @relation(fields: [clinicId], references: [id])
  clinicId                                         Int?

  @@index([email], map: "idx_user_email")
  @@map("users")
}

enum appointment_status {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum days_of_week {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum gender {
  MALE
  FEMALE
  OTHER
}

enum invoice_status {
  PENDING
  PAID
  CANCELLED
}

enum Role {
  ADMIN
  DOCTOR
  RECEPTIONIST
  MANAGER
}
